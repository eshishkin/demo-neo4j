version: "2"

services:
  neo4j:
    image: neo4j:4.3.7
    mem_limit: 2g
    cpus: 1
    environment:
      - NEO4J_AUTH=none
      - NEO4JLABS_PLUGINS=["apoc", "graph-data-science"]
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      backend:
        aliases:
          - neo4j

  postgres:
    image: postgres:14
    cpus: 1
    environment:
      - POSTGRES_DB=test
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
    ports:
      - "5432:5432"
    networks:
      backend:
        aliases:
          - postgres

  neo4j-service-first:
    image: eshishkin/demo/neo4j
    mem_limit: 1g
    cpus: 1
    depends_on:
      - neo4j
    expose:
      - "8080"
    ports:
      - "8080:8080"
    environment:
      - JAVA_TOOL_OPTIONS=-Xms640m -Xss512k -Xmx640m -XX:MaxMetaspaceSize=100M -XX:ReservedCodeCacheSize=60M -XX:+UseContainerSupport -XX:+AlwaysActAsServerClassMachine -XX:+AlwaysPreTouch
    command: [
               "--spring.profiles.active=neo4j"
    ]
    networks:
      backend:
        aliases:
          - neo4j-service-first

  neo4j-service-second:
    image: eshishkin/demo/neo4j
    mem_limit: 1g
    cpus: 1
    depends_on:
      - neo4j
    expose:
      - "8080"
    ports:
      - "18080:8080"
    environment:
      - JAVA_TOOL_OPTIONS=-Xms640m -Xss512k -Xmx640m -XX:MaxMetaspaceSize=100M -XX:ReservedCodeCacheSize=60M -XX:+UseContainerSupport -XX:+AlwaysActAsServerClassMachine -XX:+AlwaysPreTouch
    command: [
        "--spring.profiles.active=neo4j"
    ]
    networks:
      backend:
        aliases:
          - neo4j-service-second

  postgres-service:
    image: eshishkin/demo/neo4j
    mem_limit: 1g
    cpus: 1
    depends_on:
      - postgres
    expose:
      - "8080"
    ports:
      - "28080:8080"
    environment:
      - JAVA_TOOL_OPTIONS=-Xms640m -Xss512k -Xmx640m -XX:MaxMetaspaceSize=100M -XX:ReservedCodeCacheSize=60M -XX:+UseContainerSupport -XX:+AlwaysActAsServerClassMachine -XX:+AlwaysPreTouch
    command: [
        "--spring.profiles.active=postgres",
    ]
    networks:
      backend:
        aliases:
          - postgres-service


  prometheus:
    image: prom/prometheus:latest
    cpus: 0.15
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus/data
    command: "--config.file=/etc/prometheus/prometheus.yml"
    expose:
      - 9090
    ports:
      - 9090:9090
    networks:
      backend:
        aliases:
          - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    cpus: 0.25
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 38080:8080
    command: [
        '--housekeeping_interval=1s',
        '--store_container_labels=false'
      #        '-docker_only=false'
    ]
    networks:
      - backend

  grafana:
    image: grafana/grafana:7.1.5
    cpus: 0.15
    ports:
      - 3000:3000
    command: "--config=/etc/grafana/custom/custom.ini"
    depends_on:
      - cadvisor
      - prometheus
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/settings:/etc/grafana/custom
    networks:
      - backend

networks:
  backend:
